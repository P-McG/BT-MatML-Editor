#pragma once


#include "bellshire/GUI/BT_MatML_MatML_GUI_Lib.h"
#include "bellshire/GUI/utilities/BT_MatML_Functor_SetupCtrl_MatMLTree_GUI.h"

#include <memory>

namespace bellshire::GUI {


    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="MatML_Lib_Class"></typeparam>
    /// <param name="lib">Input</param>
    /// <param name="lib_element">Output</param>
    /// <param name="MatML_Lib_Filename">Input</param>
    template< class MatML_Lib_Class >
    inline std::unique_ptr<MatML_Lib_Class> MatML_GUI_Lib::GetLib(
        const wxString& MatML_Lib_Filename
    )
    {
        std::unique_ptr<MatML_Lib_Class> element{};

        //Get Lib data
        wxString str_dflt("../../data/libs");//temps
        wxConfig(wxT("BTMatML")).Read(wxT("/General/LibDir"), &str_dflt);

        std::string str(str_dflt.c_str() + "\\");
        str.append(MatML_Lib_Filename.c_str());

        //Check to see if the data file is corrupted.
        assert(Get(str, element));

        return std::move(element);
    }

    template< class MatML_Lib_Class >
    void  MatML_GUI_Lib::SetLib(
        std::unique_ptr<xml_schema::element_type>& lib_element, 
        const wxString& MatML_Lib_Filename
    )
    {
        if (!lib_element) return;

        // Convert to MatML_lib element
        // dynamic cast if we're unsure that it is cast able
        if (dynamic_cast<MatML_Lib_Class*>(lib_element.get())) {
            lib_element.reset(static_cast<MatML_Lib_Class*>(lib_element.release()));
        }


        // Save Lib data
        wxString str_dflt("../../data/libs");//temps
        wxConfig(wxT("BTMatML")).Read(wxT("/General/LibDir"), &str_dflt);

        std::string str(str_dflt.c_str() + "\\");
        str.append(MatML_Lib_Filename.c_str());

        //If assert throws check to see if the file is writable
        assert(Set(str, lib_element));
    }

    //template<class MatML_Lib_Class>
    //inline std::unique_ptr<MatML_Lib_Class> MatML_GUI_Lib::GetLib(MatML_Lib lib, const wxString& unique_ptr&)
    //{
    //    return std::unique_ptr<MatML_Lib_Class>();
    //}

    template< class MatML_Class,
        class MatML_Class_Base,
        class MatML_Lib_Class
    >
    static void  MatML_GUI_Lib::UpdateLib(
        TreeCtrlSorted* MatMLLibTreeCtrl,
        observer_ptr<xml_schema::element_type> generic_lib_element
    )
    {
        MatMLLibTreeCtrl->DeleteAllItems();
        wxTreeItemId item = MatMLLibTreeCtrl->AppendItem(MatMLLibTreeCtrl->GetRootItem(), wxT("Drag and Drop"));

        
        if (generic_lib_element) {

            
            /* 
            The following is cast from the generic MatML_lib element(aka.xml_schema::element_type).
            */
            // Specific Matml_lib element in the bellshire::Lib namespace 
            observer_ptr<MatML_Lib_Class> specific_lib_element{ dynamic_cast<observer_ptr<MatML_Lib_Class>>(generic_lib_element) };
            assert(specific_lib_element);
            /*
            These classes are related by the code generated by Code-Synthesis xsd. 
            Otherwise within this program these classes are not related (base or derived),
            hence the need for reinterpret_cast.
            */
            // Specific MatML element in the bellshire namespace cast from the 
            // specific MatML_lib element in the bellshire::Lib Namespace.
            auto matml_element{ reinterpret_cast<observer_ptr<MatML_Class>>(&specific_lib_element->value()) };
            typename bellshire::GUI::utilities::Functor_SetupCtrl_MatMLTree_GUI::Data data{
                MatMLLibTreeCtrl, MatMLLibTreeCtrl->GetRootItem(), /*wxTreeItemId(), */item
            };
            typename bellshire::GUI::utilities::Functor_SetupCtrl_MatMLTree_GUI func1{ data };

            MatML_Class_Base::TraverseMatMLTree(matml_element, func1, RecursiveFlags{ true, false });
            wxTreeItemId inserteditem = func1.operator() < MatML_Class > ();

            MatMLLibTreeCtrl->SelectItem(inserteditem);
            MatMLLibTreeCtrl->ExpandAll();
        }
    }

    template< class MatML_Class, 
        class MatML_Class_Base, 
        class MatML_Lib_Class
    >
    static wxWindow* MatML_GUI_Lib::CreateLibPanel(wxWindow* parent,
        TreeCtrlSorted*& MatMLLibTreeCtrl,
        observer_ptr<xml_schema::element_type> lib_element,
        MatMLLibDropTarget*& droptarget
    )
    {
        wxScrolledWindow* LibPanel = new wxScrolledWindow(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxHSCROLL | wxVSCROLL);
        LibPanel->SetScrollRate(5, 5);

        wxBoxSizer* bxSizer = new wxBoxSizer(wxVERTICAL);

        wxStaticText* staticText3 = new wxStaticText(LibPanel, wxID_ANY, wxT("Library of MatML elements. \nPlease drag and drop children into the MatML_Doc Tree"), wxDefaultPosition, wxDefaultSize, 0);
        staticText3->Wrap(-1);
        bxSizer->Add(staticText3, 0, wxALL, 5);

        wxArrayString selection = {};
        selection.Add("Clear idrefs");
        selection.Add("Keep idrefs and keep MatML_Doc Metadata");
        selection.Add("Keep idrefs and write over MatML_Doc Metadata");

        auto radioBox = new wxRadioBox(LibPanel, wxID_ANY, "Options:", wxDefaultPosition, wxDefaultSize, selection, 1, wxRA_SPECIFY_COLS);

        bxSizer->Add(radioBox, 0, wxALL, 5);

        MatMLLibTreeCtrl = new TreeCtrlSorted(LibPanel, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), wxTR_HAS_BUTTONS | wxTR_HAS_VARIABLE_ROW_HEIGHT | wxTR_LINES_AT_ROOT | wxTR_SINGLE | wxTR_TWIST_BUTTONS | wxALWAYS_SHOW_SB | wxCLIP_CHILDREN | wxFULL_REPAINT_ON_RESIZE | wxNO_BORDER | wxTAB_TRAVERSAL | wxVSCROLL);
        MatMLLibTreeCtrl->SetFont(wxFont(wxNORMAL_FONT->GetPointSize(), wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Arial")));
        MatMLLibTreeCtrl->SetMinSize(wxSize(100, 500));

        bxSizer->Add(MatMLLibTreeCtrl, 1, wxEXPAND, 0);

        LibPanel->SetSizer(bxSizer);
        LibPanel->Layout();
        bxSizer->Fit(LibPanel);

        UpdateLib<MatML_Class,
            MatML_Class_Base,
            MatML_Lib_Class
        >(MatMLLibTreeCtrl, lib_element);

        //Set up dnd target
        droptarget = new MatMLLibDropTarget(MatMLLibTreeCtrl);
        MatMLLibTreeCtrl->SetDropTarget(droptarget);


        return LibPanel;
    };
}//namespace bellshire

